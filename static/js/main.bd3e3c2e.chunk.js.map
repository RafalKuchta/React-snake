{"version":3,"sources":["const.js","Cells.js","Keys.js","Game.js","index.js"],"names":["KEYS","DIRS","37","38","39","40","Cells","board","handleKey","cells","row","col","key","value","className","push","style","width","COLS","height","ROWS","onKeyDown","tabIndex","Keys","handleButton","onClick","Game","props","e","direction","nativeEvent","keyCode","diff","Math","abs","state","nextDirection","document","querySelector","addEventListener","snake","gameOver","start","bind","frame","this","setState","head","getNextIndex","food","length","indexOf","alert","i","floor","random","pop","unshift","setTimeout","x","y","Component","ReactDOM","render","getElementById"],"mappings":"2MAGaA,EAAc,GAAdA,EAAsB,GAAtBA,EAAiC,GAAjCA,EAA2C,GAC3CC,EAAO,CAACC,IAAI,EAAMC,IAAI,EAAMC,IAAI,EAAMC,IAAI,GCuBxCC,MAvBf,YAGI,IAHiC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,UACdC,EAAQ,GAELC,EAAM,EAAGA,EDPF,GCOcA,IAC1B,IAAK,IAAIC,EAAM,EAAGA,EDRK,GCQOA,IAAM,CAChC,IAAMC,EDTa,GCSAF,EAAMC,EACnBE,EAAQN,EAAMK,GACdE,EDVE,ICUUD,EAAiB,YDVjB,ICU+BA,EAAiB,YAAc,OAChFJ,EAAMM,KAAK,yBAAKH,IAAKA,EAAKE,UAAWA,KAG7C,OACA,yBACAA,UAAU,QACVE,MAAO,CAACC,MAAOC,IAAWC,OAAQC,KAClCC,UAAWb,EACXc,SAAU,GAETb,ICLUc,MAdf,YAA8B,IAAfC,EAAc,EAAdA,aAGX,OACI,yBAAKV,UAAU,UACf,4BAAQW,QAASD,EAAcV,UAAU,wBAAzC,QAEA,6BAAK,4BAAQW,QAASD,EAAcV,UAAU,sBAAzC,MAAyE,4BAAQW,QAASD,EAAcV,UAAU,wBAAzC,SAE9E,4BAAQW,QAASD,EAAcV,UAAU,yBAAzC,WC+IOY,G,kBApJX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAoFVnB,UAAY,SAACoB,GACT,IAAMC,EAAYD,EAAEE,YAAYC,QAC1BC,EAAOC,KAAKC,IAAI,EAAKC,MAAMN,UAAYA,GAE1C5B,EAAK4B,IAAuB,IAATG,GAAuB,IAATA,IAChC,EAAKI,cAAgBP,IA1FX,EA8FlBL,aAAe,WACXa,SAASC,cAAc,OAAOC,iBAAiB,SAAS,WACpD,EAAKH,cAAgBpC,KAIzBqC,SAASC,cAAc,SAASC,iBAAiB,SAAS,WACtD,EAAKH,cAAgBpC,KAGzBqC,SAASC,cAAc,UAAUC,iBAAiB,SAAS,WACvD,EAAKH,cAAgBpC,KAGzBqC,SAASC,cAAc,SAASC,iBAAiB,SAAS,WACtD,EAAKH,cAAgBpC,MA1GzB,EAAKmC,MAAQ,CACT5B,MAAO,GACPiC,MAAO,GACPX,UAAW,KACXY,UAAU,GAGd,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBACb,EAAKnC,UAAY,EAAKA,UAAUmC,KAAf,gBACjB,EAAKnB,aAAe,EAAKA,aAAamB,KAAlB,gBAbN,E,iFAiBdE,KAAKH,U,8BAKL,IAAMnC,EAAQ,GACRiC,EAAQ,CH5BD,IG6BbjC,EH7Ba,IADD,EGgCZsC,KAAKC,SAAS,CACVvC,QACAiC,QACAX,UAAW7B,GACZ6C,KAAKD,W,8BAGH,IAAD,SAC6BC,KAAKV,MAAhCK,EADF,EACEA,MAAOjC,EADT,EACSA,MAAOsB,EADhB,EACgBA,UAGdkB,EAAOF,KAAKG,aAAaR,EAAM,GAAIX,GAEnCoB,EH7CgB,IG6CT1C,EAAMwC,IAAmC,IAAjBP,EAAMU,OAE3C,IAA4B,IAAzBV,EAAMW,QAAQJ,GAIZ,OAHDF,KAAKC,SAAS,CACVL,UAAU,IAENW,MAAM,YAGlB,GAAGH,EAAK,CACJ,IAEII,EAEJ,GACIA,EAAIpB,KAAKqB,MALIlC,IAKEa,KAAKsB,gBACjBhD,EAAM8C,IACb9C,EAAM8C,GH9DY,OGkEtB9C,EAAMiC,EAAMgB,OAAS,KAIrBjD,EAAMwC,GHtEM,EGyEZP,EAAMiB,QAAQV,GAEXF,KAAKT,gBACJP,EAAYgB,KAAKT,cACjBS,KAAKT,cAAgB,MAIzBS,KAAKC,SAAS,CACVvC,QACAiC,QACAX,cACD,WACC6B,WAAW,EAAKd,MAAO,U,mCAqClBG,EAAMlB,GACf,IAAI8B,EAAIZ,EH7He,GG8HnBa,EAAI3B,KAAKqB,MAAMP,EH9HI,IGgIvB,OAAQlB,GACJ,KAAK7B,EAAS4D,EAAIA,GAAK,EAAIxC,GAAUwC,EAAI,EAAG,MAC5C,KAAK5D,EAAW4D,EAAIA,GHlIZ,GGkIwB,EAAIA,EAAI,EAAG,MAC3C,KAAK5D,EAAW2D,EAAIA,GAAK,EAAIzC,GAAUyC,EAAG,EAAG,MAC7C,KAAK3D,EAAY2D,EAAIA,GAAKzC,GAAU,EAAIyC,EAAI,EAAG,MAC/C,QAAS,OAEb,OHvIuB,GGuIRC,EAAKD,I,+BAGd,IACCpD,EAASsC,KAAKV,MAAd5B,MACP,OACI,oCACJ,kBAAC,EAAD,CACAC,UAAWqC,KAAKrC,UAChBD,MAAOA,IAEP,kBAAC,EAAD,CACIiB,aAAcqB,KAAKrB,oB,GA7IZqC,cCFnBC,IAASC,OACL,kBAAC,EAAD,MAAU1B,SAAS2B,eAAe,U","file":"static/js/main.bd3e3c2e.chunk.js","sourcesContent":["export const ROWS = 20, COLS = 20, CELL = 30;\r\nexport const BODY = 1, FOOD = 2;\r\nexport const START = 44;\r\nexport const KEYS = {left: 37, up: 38, right: 39, down: 40};\r\nexport const DIRS = {37: true, 38: true, 39: true, 40: true};","import React from 'react';\r\nimport {ROWS, COLS, CELL, FOOD, BODY} from './const';\r\n\r\n\r\nfunction Cells ({board, handleKey}) {\r\n    const cells = [];\r\n\r\n    for (let row = 0; row < ROWS; row++){\r\n        for (let col = 0; col < COLS; col++){\r\n            const key = COLS * row + col\r\n            const value = board[key];\r\n            const className = value === BODY ? 'body-cell' : value === FOOD ? 'food-cell' : 'cell';            \r\n            cells.push(<div key={key} className={className}/>)\r\n        }\r\n    }\r\n    return(\r\n    <div \r\n    className='board'\r\n    style={{width: COLS*CELL, height: ROWS*CELL}}\r\n    onKeyDown={handleKey}\r\n    tabIndex={0}\r\n    >\r\n    {cells}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Cells;","import React from 'react';\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\nfunction Keys({handleButton}){\r\n\r\n\r\n    return(\r\n        <div className=\"btnDiv\">\r\n        <button onClick={handleButton} className=\"btn btn-primary left\">Left</button>\r\n\r\n        <div><button onClick={handleButton} className=\"btn btn-primary up\">Up</button><button onClick={handleButton} className=\"btn btn-primary down\">Down</button></div>\r\n        \r\n        <button onClick={handleButton} className=\"btn btn-primary right\">Right</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Keys;","import React, {Component} from 'react';\r\nimport Cells from './Cells';\r\nimport Keys from './Keys';\r\nimport {START, BODY, KEYS, COLS, ROWS, FOOD, DIRS} from './const';\r\nimport './style.css';\r\n\r\nclass Game extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            board: [],\r\n            snake: [],\r\n            direction: null,\r\n            gameOver: false\r\n        }\r\n\r\n        this.start = this.start.bind(this);\r\n        this.frame = this.frame.bind(this);\r\n        this.handleKey = this.handleKey.bind(this);\r\n        this.handleButton = this.handleButton.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.start()\r\n    }\r\n\r\n\r\n    start(){\r\n        const board = [];\r\n        const snake = [START];\r\n        board[START] = BODY;\r\n\r\n        this.setState({\r\n            board,\r\n            snake,\r\n            direction: KEYS.right\r\n        }, this.frame());\r\n    }\r\n\r\n    frame() {\r\n        let { snake, board, direction} = this.state;\r\n        //wyznaczamy pozycję głowy snake i kierunek\r\n        //głowa to jest pierwsza pozycja w tablicy snake (snake[0])\r\n        const head = this.getNextIndex(snake[0], direction)\r\n\r\n        const food = board[head] === FOOD || snake.length === 1;\r\n\r\n        if(snake.indexOf(head) !== -1){\r\n            this.setState({\r\n                gameOver: true\r\n            })\r\n             return alert(\"GameOver\");\r\n        }\r\n\r\n        if(food){\r\n            const maxCeels = ROWS * COLS \r\n\r\n            let i;\r\n\r\n            do {\r\n                i = Math.floor(Math.random() * maxCeels)\r\n            }while(board[i])\r\n            board[i] = FOOD;\r\n\r\n        } else {\r\n                   //Usówamy ostatni element z tablicy board i generujemy nową tablicę metodą pop\r\n        board[snake.pop()] = null;\r\n        }\r\n\r\n        //Przypisujemy nową pozycję głowy snake\r\n        board[head] = BODY;\r\n\r\n        //dodajemy nową pozycję do snake, unshift dodaje nową pozycjęna początek tablicy\r\n        snake.unshift(head);\r\n\r\n        if(this.nextDirection){\r\n            direction = this.nextDirection;\r\n            this.nextDirection = null;\r\n        }\r\n \r\n\r\n        this.setState({\r\n            board,\r\n            snake,\r\n            direction\r\n        }, () => {\r\n            setTimeout(this.frame, 200)\r\n        })\r\n\r\n    }\r\n\r\n    handleKey = (e) => {\r\n        const direction = e.nativeEvent.keyCode;\r\n        const diff = Math.abs(this.state.direction - direction)\r\n\r\n        if(DIRS[direction] && diff !== 0 && diff !== 2){\r\n            this.nextDirection = direction;\r\n        }\r\n    }\r\n\r\n    handleButton = () => {\r\n        document.querySelector('.up').addEventListener('click', () => {\r\n            this.nextDirection = KEYS.up\r\n            \r\n        })\r\n\r\n        document.querySelector('.left').addEventListener('click', () => {\r\n            this.nextDirection = KEYS.left\r\n        })\r\n\r\n        document.querySelector('.right').addEventListener('click', () => {\r\n            this.nextDirection = KEYS.right\r\n        })\r\n\r\n        document.querySelector('.down').addEventListener('click', () => {\r\n            this.nextDirection = KEYS.down\r\n        })\r\n\r\n        \r\n\r\n    }\r\n\r\n    \r\n    getNextIndex(head, direction){\r\n        let x = head % COLS;\r\n        let y = Math.floor(head / COLS);\r\n\r\n        switch (direction){\r\n            case KEYS.up: y = y <= 0 ? ROWS -1 : y - 1; break;\r\n            case KEYS.down: y = y >= ROWS ? 0 : y + 1; break;\r\n            case KEYS.left: x = x <= 0 ? COLS -1 : x -1; break;\r\n            case KEYS.right: x = x >= COLS -1 ? 0 : x + 1; break;\r\n            default: return;\r\n        }\r\n        return (COLS * y) + x;\r\n    }\r\n\r\n    render() {\r\n        const {board} = this.state\r\n        return (\r\n            <>\r\n        <Cells \r\n        handleKey={this.handleKey}\r\n        board={board} \r\n       />\r\n        <Keys \r\n            handleButton={this.handleButton}\r\n        />\r\n        \r\n        </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\n\nReactDOM.render(\n    <Game />, document.getElementById('root'));\n"],"sourceRoot":""}