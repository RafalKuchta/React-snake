{"version":3,"sources":["const.js","Cells.js","Game.js","index.js"],"names":["KEYS","DIRS","37","38","39","40","Cells","board","handleKey","cells","row","col","key","value","className","push","style","width","COLS","height","ROWS","onKeyDown","tabIndex","Game","props","e","direction","nativeEvent","keyCode","diff","Math","abs","state","nextDirection","snake","gameOver","start","bind","frame","this","setState","head","getNextIndex","food","length","indexOf","alert","i","floor","random","pop","unshift","setTimeout","x","y","Component","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,GAAdA,EAAsB,GAAtBA,EAAiC,GAAjCA,EAA2C,GAC3CC,EAAO,CAACC,IAAI,EAAMC,IAAI,EAAMC,IAAI,EAAMC,IAAI,GCuBxCC,MAvBf,YAGI,IAHiC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,UACdC,EAAQ,GAELC,EAAM,EAAGA,EDPF,GCOcA,IAC1B,IAAK,IAAIC,EAAM,EAAGA,EDRK,GCQOA,IAAM,CAChC,IAAMC,EDTa,GCSAF,EAAMC,EACnBE,EAAQN,EAAMK,GACdE,EDVE,ICUUD,EAAiB,YDVjB,ICU+BA,EAAiB,YAAc,OAChFJ,EAAMM,KAAK,yBAAKH,IAAKA,EAAKE,UAAWA,KAG7C,OACA,yBACAA,UAAU,QACVE,MAAO,CAACC,MAAOC,IAAWC,OAAQC,KAClCC,UAAWb,EACXc,SAAU,GAETb,ICqGUc,G,kBArHX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAkFVhB,UAAY,SAACiB,GACT,IAAMC,EAAYD,EAAEE,YAAYC,QAC1BC,EAAOC,KAAKC,IAAI,EAAKC,MAAMN,UAAYA,GAE1CzB,EAAKyB,IAAuB,IAATG,GAAuB,IAATA,IAChC,EAAKI,cAAgBP,IArFzB,EAAKM,MAAQ,CACTzB,MAAO,GACP2B,MAAO,GACPR,UAAW,KACXS,UAAU,GAGd,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBACb,EAAK7B,UAAY,EAAKA,UAAU6B,KAAf,gBAZH,E,iFAgBdE,KAAKH,U,8BAIL,IAAM7B,EAAQ,GACR2B,EAAQ,CFzBD,IE0Bb3B,EF1Ba,IADD,EE6BZgC,KAAKC,SAAS,CACVjC,QACA2B,QACAR,UAAW1B,GACZuC,KAAKD,W,8BAGH,IAAD,SAC6BC,KAAKP,MAAhCE,EADF,EACEA,MAAO3B,EADT,EACSA,MAAOmB,EADhB,EACgBA,UAGde,EAAOF,KAAKG,aAAaR,EAAM,GAAIR,GAEnCiB,EF1CgB,IE0CTpC,EAAMkC,IAAmC,IAAjBP,EAAMU,OAE3C,IAA4B,IAAzBV,EAAMW,QAAQJ,GAIZ,OAHDF,KAAKC,SAAS,CACVL,UAAU,IAENW,MAAM,YAGlB,GAAGH,EAAK,CACJ,IAEII,EAEJ,GACIA,EAAIjB,KAAKkB,MALI5B,IAKEU,KAAKmB,gBACjB1C,EAAMwC,IACbxC,EAAMwC,GF3DY,OE+DtBxC,EAAM2B,EAAMgB,OAAS,KAIrB3C,EAAMkC,GFnEM,EEsEZP,EAAMiB,QAAQV,GAEXF,KAAKN,gBACJP,EAAYa,KAAKN,cACjBM,KAAKN,cAAgB,MAIzBM,KAAKC,SAAS,CACVjC,QACA2B,QACAR,cACD,WACC0B,WAAW,EAAKd,MAAO,U,mCAclBG,EAAMf,GACf,IAAI2B,EAAIZ,EFnGe,GEoGnBa,EAAIxB,KAAKkB,MAAMP,EFpGI,IEsGvB,OAAQf,GACJ,KAAK1B,EAASsD,EAAIA,GAAK,EAAIlC,GAAUkC,EAAI,EAAG,MAC5C,KAAKtD,EAAWsD,EAAIA,GFxGZ,GEwGwB,EAAIA,EAAI,EAAG,MAC3C,KAAKtD,EAAWqD,EAAIA,GAAK,EAAInC,GAAUmC,EAAG,EAAG,MAC7C,KAAKrD,EAAYqD,EAAIA,GAAKnC,GAAU,EAAImC,EAAI,EAAG,MAC/C,QAAS,OAEb,OF7GuB,GE6GRC,EAAKD,I,+BAGd,IACC9C,EAASgC,KAAKP,MAAdzB,MACP,OACA,kBAAC,EAAD,CACAC,UAAW+B,KAAK/B,UAChBD,MAAOA,Q,GAhHIgD,cCDnBC,IAASC,OACL,kBAAC,EAAD,MAAUC,SAASC,eAAe,U","file":"static/js/main.96924e37.chunk.js","sourcesContent":["export const ROWS = 20, COLS = 20, CELL = 30;\r\nexport const BODY = 1, FOOD = 2;\r\nexport const START = 44;\r\nexport const KEYS = {left: 37, up: 38, right: 39, down: 40};\r\nexport const DIRS = {37: true, 38: true, 39: true, 40: true};","import React from 'react';\r\nimport {ROWS, COLS, CELL, FOOD, BODY} from './const';\r\n\r\n\r\nfunction Cells ({board, handleKey}) {\r\n    const cells = [];\r\n\r\n    for (let row = 0; row < ROWS; row++){\r\n        for (let col = 0; col < COLS; col++){\r\n            const key = COLS * row + col\r\n            const value = board[key];\r\n            const className = value === BODY ? 'body-cell' : value === FOOD ? 'food-cell' : 'cell';            \r\n            cells.push(<div key={key} className={className}/>)\r\n        }\r\n    }\r\n    return(\r\n    <div \r\n    className='board'\r\n    style={{width: COLS*CELL, height: ROWS*CELL}}\r\n    onKeyDown={handleKey}\r\n    tabIndex={0}\r\n    >\r\n    {cells}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Cells;","import React, {Component} from 'react';\r\nimport Cells from './Cells';\r\nimport {START, BODY, KEYS, COLS, ROWS, FOOD, DIRS} from './const';\r\nimport './style.css';\r\n\r\nclass Game extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            board: [],\r\n            snake: [],\r\n            direction: null,\r\n            gameOver: false\r\n        }\r\n\r\n        this.start = this.start.bind(this);\r\n        this.frame = this.frame.bind(this);\r\n        this.handleKey = this.handleKey.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.start()\r\n    }\r\n\r\n    start(){\r\n        const board = [];\r\n        const snake = [START];\r\n        board[START] = BODY;\r\n\r\n        this.setState({\r\n            board,\r\n            snake,\r\n            direction: KEYS.right\r\n        }, this.frame());\r\n    }\r\n\r\n    frame() {\r\n        let { snake, board, direction} = this.state;\r\n        //wyznaczamy pozycję głowy snake i kierunek\r\n        //głowa to jest pierwsza pozycja w tablicy snake (snake[0])\r\n        const head = this.getNextIndex(snake[0], direction)\r\n\r\n        const food = board[head] === FOOD || snake.length === 1;\r\n\r\n        if(snake.indexOf(head) !== -1){\r\n            this.setState({\r\n                gameOver: true\r\n            })\r\n             return alert(\"GameOver\");\r\n        }\r\n\r\n        if(food){\r\n            const maxCeels = ROWS * COLS \r\n\r\n            let i;\r\n\r\n            do {\r\n                i = Math.floor(Math.random() * maxCeels)\r\n            }while(board[i])\r\n            board[i] = FOOD;\r\n\r\n        } else {\r\n                   //Usówamy ostatni element z tablicy board i generujemy nową tablicę metodą pop\r\n        board[snake.pop()] = null;\r\n        }\r\n\r\n        //Przypisujemy nową pozycję głowy snake\r\n        board[head] = BODY;\r\n\r\n        //dodajemy nową pozycję do snake, unshift dodaje nową pozycjęna początek tablicy\r\n        snake.unshift(head);\r\n\r\n        if(this.nextDirection){\r\n            direction = this.nextDirection;\r\n            this.nextDirection = null;\r\n        }\r\n \r\n\r\n        this.setState({\r\n            board,\r\n            snake,\r\n            direction\r\n        }, () => {\r\n            setTimeout(this.frame, 200)\r\n        })\r\n\r\n    }\r\n\r\n    handleKey = (e) => {\r\n        const direction = e.nativeEvent.keyCode;\r\n        const diff = Math.abs(this.state.direction - direction)\r\n\r\n        if(DIRS[direction] && diff !== 0 && diff !== 2){\r\n            this.nextDirection = direction;\r\n        }\r\n    }\r\n\r\n    getNextIndex(head, direction){\r\n        let x = head % COLS;\r\n        let y = Math.floor(head / COLS);\r\n\r\n        switch (direction){\r\n            case KEYS.up: y = y <= 0 ? ROWS -1 : y - 1; break;\r\n            case KEYS.down: y = y >= ROWS ? 0 : y + 1; break;\r\n            case KEYS.left: x = x <= 0 ? COLS -1 : x -1; break;\r\n            case KEYS.right: x = x >= COLS -1 ? 0 : x + 1; break;\r\n            default: return;\r\n        }\r\n        return (COLS * y) + x;\r\n    }\r\n\r\n    render() {\r\n        const {board} = this.state\r\n        return (\r\n        <Cells \r\n        handleKey={this.handleKey}\r\n        board={board} \r\n        />\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\n\nReactDOM.render(\n    <Game />, document.getElementById('root'));\n"],"sourceRoot":""}